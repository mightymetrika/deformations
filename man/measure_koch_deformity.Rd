% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/measure_koch_deformity.R
\name{measure_koch_deformity}
\alias{measure_koch_deformity}
\title{Deformity Evolution in Koch Snowflake Construction}
\usage{
measure_koch_deformity(
  side_length = 1,
  max_iterations = 10,
  deformity_type = c("radius", "circle_area", "relative")
)
}
\arguments{
\item{side_length}{Numeric. Side length of the initial equilateral triangle. Default is 1.}

\item{max_iterations}{Integer. Maximum number of Koch iterations to compute. Default is 10.}

\item{deformity_type}{Character. Type of deformity to measure:
"radius" (default) - difference in equivalent circle radii
"circle_area" - difference in areas when mapping to circles
"relative" - relative deformity (deformity/average radius)}
}
\value{
Object of class "koch_deformity" containing:
\itemize{
\item iteration: iteration number (0 = original triangle)
\item perimeter: perimeter at this iteration
\item area: area at this iteration
\item r_perimeter: radius of circle with same perimeter
\item r_area: radius of circle with same area
\item deformity: measured geometric inconsistency
}
}
\description{
Measures the geometric inconsistency that develops as a Koch snowflake is constructed
through recursive iterations. At each iteration, the perimeter grows while the area
approaches a finite limit, creating increasing deformity between area-based and
perimeter-based circle approximations.
}
\details{
Calculate Koch Snowflake Deformity Evolution

The Koch snowflake construction creates a fractal where:
\itemize{
\item Perimeter: \eqn{P_k = 3s \times (4/3)^k}
\item Area: \eqn{A_k = A_0 \times [1 + \frac{1}{3}\sum_{i=0}^{k-1}(\frac{4}{9})^i]}
}

Where s is the initial triangle side length and k is the iteration number.

The deformity measures the inconsistency between:
\itemize{
\item \eqn{r_{perimeter} = P_k/(2\pi)} (circle radius preserving perimeter)
\item \eqn{r_{area} = \sqrt{A_k/\pi}} (circle radius preserving area)
}
}
\examples{
# Basic Koch deformity evolution
koch_def <- measure_koch_deformity(side_length = 1, max_iterations = 8)

# Plot using S3 method
plot(koch_def)
plot(koch_def, log_scale = TRUE)

# Print summary
print(koch_def)
summary(koch_def)

}
\seealso{
\code{\link{dcaprps}} for polygon deformity
}
